{"version":3,"file":"registry.spec.js","sourceRoot":"","sources":["../ts/registry.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { CanAssign, isType, KeyTypes } from 'type-plus'\nimport { createRegistry, Registry } from '.'\nimport { ReadonlyRegistry, toReadonlyRegistry } from './registry'\n\ndescribe('createRegistry()', () => {\n  test('create empty registry', () => {\n    const a = createRegistry()\n    expect(a.size()).toBe(0)\n    isType.equal<true, Registry<KeyTypes, unknown>, typeof a>()\n  })\n\n  test('create with initial records', () => {\n    const a = createRegistry({ a: 1, b: 2 })\n    expect(a.size()).toBe(2)\n    isType.equal<true, Registry<string, number>, typeof a>()\n  })\n\n  test('key of the init record can be symbol', () => {\n    const s = Symbol()\n    const a = createRegistry({ [s]: 's', b: 'b' })\n    expect(a.size()).toBe(2)\n    expect(a.get()[s]).toBe('s')\n    isType.equal<true, true, CanAssign<typeof a, Registry<string | symbol, string>>>()\n  })\n\n  describe('keys()', () => {\n    test('get both string and symbol keys', () => {\n      const s = Symbol()\n      const a = createRegistry({ [s]: 's', b: 'b' })\n      expect(a.keys()).toEqual(['b', s])\n    })\n  })\n\n  describe('list()', () => {\n    test('list all values', () => {\n      const s = Symbol()\n      const a = createRegistry({ [s]: 's', b: 'b' })\n      expect(a.list()).toEqual(['b', 's'])\n    })\n  })\n})\n\n\ndescribe('toReadonlyRegistry()', () => {\n  test('usage', () => {\n    const s = createRegistry({ a: 1 })\n    const r = toReadonlyRegistry(s)\n\n    expect(Object.keys(r)).toEqual(['get', 'onChange', 'keys', 'size', 'list'])\n    isType.equal<true, ReadonlyRegistry<string, number>, typeof r>()\n  })\n})\n"]}