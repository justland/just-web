{"version":3,"file":"adder.spec.js","sourceRoot":"","sources":["../ts/adder.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { adder, push, unshift, withAdder } from './adder'\nimport { createRegistry } from './registry'\nimport { createStore } from './store'\n\ndescribe('adder()', () => {\n  test('creates an add function for store', () => {\n    const store = createStore<string[]>([])\n    const add = adder(store, (array, entry) => { array.push(entry) })\n    add('a', 'b')\n    expect(store.get()).toEqual(['a', 'b'])\n  })\n\n  test('use provided push', () => {\n    const store = createStore<string[]>([])\n    const add = adder(store, push)\n    add('a', 'b')\n    expect(store.get()).toEqual(['a', 'b'])\n  })\n\n  test('use provided unshift', () => {\n    const store = createStore<string[]>([])\n    const add = adder(store, unshift)\n    add('a', 'b')\n    expect(store.get()).toEqual(['b', 'a'])\n  })\n\n  test('creates an add function for registry', () => {\n    const store = createRegistry<string, { key: string, value: number }>({})\n    const add = adder(store, (record, entry) => record[entry.key] = entry)\n    add({ key: 'a', value: 1 }, { key: 'b', value: 2 })\n\n    expect(store.get()).toEqual({\n      a: { key: 'a', value: 1 },\n      b: { key: 'b', value: 2 }\n    })\n  })\n})\n\ndescribe('withAdder()', () => {\n  test('for array store', () => {\n    const store = withAdder(\n      createStore<string[]>([]),\n      (array, entry) => { array.push(entry) })\n    store.add('a', 'b')\n    expect(store.get()).toEqual(['a', 'b'])\n  })\n\n  test('for record registry', () => {\n    const registry = withAdder(\n      createRegistry<string, { a: string }>(),\n      (record, entry) => { record[entry.a] = entry })\n    registry.add({ a: 'x' }, { a: 'y' })\n    expect(registry.get()).toEqual({ 'x': { 'a': 'x' }, 'y': { 'a': 'y' } })\n  })\n})\n"]}