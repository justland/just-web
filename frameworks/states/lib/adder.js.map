{"version":3,"file":"adder.js","sourceRoot":"","sources":["../ts/adder.ts"],"names":[],"mappings":";;;;;;AAAA,kDAAsC;AAuBtC,SAAgB,KAAK,CACnB,KAA+C,EAC/C,QAAyD;IAEzD,OAAO,UAAU,GAAG,OAAY;QAC9B,KAAK,CAAC,GAAG,CAAC,IAAA,eAAO,EACf,KAAK,CAAC,GAAG,EAAE,EACX,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAClD,CAAC,CAAA;IACJ,CAAC,CAAA;AACH,CAAC;AAVD,sBAUC;AAUD,SAAgB,SAAS,CACvB,KAA+C,EAC/C,QAAyD;IAEzD,OAAO;QACL,GAAG,KAAK;QACR,GAAG,EAAE,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC;KAC5B,CAAA;AACH,CAAC;AARD,8BAQC;AAED,SAAgB,IAAI,CAAuB,MAAgB,EAAE,KAAoB;IAC/E,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AACpB,CAAC;AAFD,oBAEC;AAED,SAAgB,OAAO,CAAuB,MAAgB,EAAE,KAAoB;IAClF,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;AACvB,CAAC;AAFD,0BAEC","sourcesContent":["import produce, { Draft } from 'immer'\nimport { ArrayValue, KeyTypes, Pick } from 'type-plus'\nimport { Store } from './store'\n\nexport interface Adder<T> {\n  (...entries: T[]): void\n}\n\nexport interface WithAdder<T> {\n  add: Adder<T>\n}\n\n/**\n * builds an adder function for a store or registry\n */\nexport function adder<A extends Array<any>, S extends Store<A>>(\n  store: Pick<S, 'get' | 'set'>,\n  addEntry: (record: Draft<A>, entry: ArrayValue<A>) => void\n): Adder<ArrayValue<A>>\nexport function adder<T, K extends KeyTypes, S extends Store<Record<K, T>>>(\n  store: Pick<S, 'get' | 'set'>,\n  addEntry: (record: Draft<Record<K, T>>, entry: T) => void\n): Adder<T>\nexport function adder<T, K extends KeyTypes = string | symbol>(\n  store: Pick<Store<Record<K, T>>, 'get' | 'set'>,\n  addEntry: (record: Draft<Record<K, T>>, entry: T) => void\n) {\n  return function (...entries: T[]) {\n    store.set(produce(\n      store.get(),\n      s => entries.forEach(entry => addEntry(s, entry))\n    ))\n  }\n}\n\nexport function withAdder<A extends Array<any>, S extends Store<A>>(\n  store: Pick<S, 'get' | 'set'>,\n  addEntry: (record: Draft<A>, entry: ArrayValue<A>) => void\n): S & WithAdder<ArrayValue<A>>\nexport function withAdder<T, K extends KeyTypes, S extends Store<Record<K, T>>>(\n  store: Pick<S, 'get' | 'set'>,\n  addEntry: (record: Draft<Record<K, T>>, entry: T) => void\n): S & WithAdder<T>\nexport function withAdder<T, K extends KeyTypes = string | symbol>(\n  store: Pick<Store<Record<K, T>>, 'get' | 'set'>,\n  addEntry: (record: Draft<Record<K, T>>, entry: T) => void\n) {\n  return {\n    ...store,\n    add: adder(store, addEntry)\n  }\n}\n\nexport function push<A extends Array<any>>(record: Draft<A>, entry: ArrayValue<A>) {\n  record.push(entry)\n}\n\nexport function unshift<A extends Array<any>>(record: Draft<A>, entry: ArrayValue<A>) {\n  record.unshift(entry)\n}\n"]}