{"version":3,"file":"store.js","sourceRoot":"","sources":["../ts/store.ts"],"names":[],"mappings":";;;;;;AAAA,uCAAoE;AACpE,kDAA2B;AAC3B,yCAAgC;AAChC,mCAA0E;AAgB1E,SAAgB,WAAW,CAAI,KAAQ;IACrC,MAAM,KAAK,GAAG,IAAA,mBAAW,EAAC,KAAK,CAAC,CAAA;IAChC,MAAM,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,CAAC,GAAG,KAAK,CAAA;IACtC,QAAQ,CACN,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,EACjB,EAAE,MAAM,EAAE,IAAA,eAAS,EAAiB,MAAM,EAAE,EAAE,KAAK,EAAE,eAAS,CAAC,IAAI,EAAE,CAAC,EAAE,CACzE,CAAA;IAED,OAAO;QACL,GAAG,KAAK,OAAO,KAAK,CAAC,CAAC,CAAC,CAAA,CAAC,CAAC;QACzB,GAAG;QACH,MAAM,CAAC,OAAO,IAAI,GAAG,CAAC,IAAA,eAAO,EAAC,KAAK,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAA,CAAC,CAAC;QACnD,QAAQ;QACR,KAAK;KACN,CAAA;AACH,CAAC;AAfD,kCAeC;AAED,SAAgB,eAAe,CAAuB,KAAQ;IAE5D,OAAO,IAAA,gBAAI,EAAC,KAAK,EAAE,KAAK,EAAE,UAAU,CAAQ,CAAA;AAC9C,CAAC;AAHD,0CAGC","sourcesContent":["import { getLogger, logLevels, LogMethodNames } from '@just-web/log'\nimport produce from 'immer'\nimport { pick } from 'type-plus'\nimport { createState, OnStateChange, ResetState, SetState } from './state'\n\nexport interface ReadonlyStore<T> {\n  get(): T,\n  onChange: OnStateChange<T>,\n}\n\nexport interface Store<T> extends ReadonlyStore<T> {\n  set: SetState<T>,\n  update: (handler: (draft: T) => T | void) => void,\n  reset: ResetState\n}\n\n/**\n * creates a object style store to track a value and its changes.\n */\nexport function createStore<T>(value: T): Store<T> {\n  const state = createState(value)\n  const [, set, onChange, reset] = state\n  onChange(\n    v => state[0] = v,\n    { logger: getLogger<LogMethodNames>('noop', { level: logLevels.none }) }\n  )\n\n  return {\n    get() { return state[0] },\n    set,\n    update(handler) { set(produce(state[0], handler)) },\n    onChange,\n    reset\n  }\n}\n\nexport function toReadonlyStore<S extends Store<any>>(store: S): S extends Store<infer T> ? ReadonlyStore<T> : never {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  return pick(store, 'get', 'onChange') as any\n}\n"]}