{"version":3,"file":"state.js","sourceRoot":"","sources":["../ts/state.ts"],"names":[],"mappings":";;;AAAA,uCAAiD;AACjD,qCAAiC;AAEpB,QAAA,QAAQ,GAAG,IAAA,eAAS,EAAC,wBAAwB,CAAC,CAAA;AAqB3D,SAAgB,WAAW,CAAI,IAAO;IACpC,MAAM,QAAQ,GAA4B,EAAE,CAAA;IAC5C,IAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IAC/B,SAAS,GAAG,CAAC,QAAW,EAAE,IAA0B;;QAClD,IAAI,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC;YAAE,OAAM;QAEtC,MAAM,GAAG,GAAG,KAAK,CAAA;QACjB,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;QAC/B,MAAM,GAAG,GAAG,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,mCAAI,gBAAQ,CAAA;QACpC,GAAG,CAAC,MAAM,CAAC,gBAAgB,EAAE,GAAG,EAAE,KAAK,CAAC,CAAA;QACxC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAA;IACtC,CAAC;IAED,SAAS,QAAQ,CAAC,OAA8B,EAAE,IAA0B;;QAC1E,IAAI,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC;YAAE,OAAO,GAAG,EAAE,GAAG,CAAC,CAAA;QAChD,MAAM,GAAG,GAAG,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,mCAAI,gBAAQ,CAAA;QACpC,GAAG,CAAC,KAAK,CAAC,yBAAyB,IAAA,iBAAO,EAAC,OAAO,CAAC,EAAE,CAAC,CAAA;QACtD,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QACtB,OAAO,GAAG,EAAE,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAA,CAAC,CAAC,CAAA;IAChE,CAAC;IAED,SAAS,KAAK,KAAK,GAAG,CAAC,IAAI,CAAC,CAAA,CAAC,CAAC;IAE9B,OAAO;QACL,KAAK;QACL,GAAG;QACH,QAAQ;QACR,KAAK;KACN,CAAA;AACH,CAAC;AA7BD,kCA6BC","sourcesContent":["import { getLogger, Logger } from '@just-web/log'\nimport { tersify } from 'tersify'\n\nexport const stateLog = getLogger('@just-web/states:state')\n\nexport interface SetState<T> {\n  (value: T, meta?: { logger?: Logger }): void\n}\n\nexport interface StateChangeHandler<T> {\n  (value: T, prev: T): void\n}\n\nexport interface OnStateChange<T> {\n  (handler: StateChangeHandler<T>, meta?: { logger?: Logger }): () => void\n}\n\nexport interface ResetState {\n  (): void\n}\n\n/**\n * creates a functional style state to track changes of a value.\n */\nexport function createState<T>(init: T): [T, SetState<T>, OnStateChange<T>, ResetState] {\n  const handlers: StateChangeHandler<T>[] = []\n  let value = Object.freeze(init)\n  function set(newValue: T, meta?: { logger?: Logger }) {\n    if (Object.is(value, newValue)) return\n\n    const old = value\n    value = Object.freeze(newValue)\n    const log = meta?.logger ?? stateLog\n    log.planck(`state changed:`, old, value)\n    handlers.forEach(h => h(value, old))\n  }\n\n  function onChange(handler: StateChangeHandler<T>, meta?: { logger?: Logger }) {\n    if (handlers.includes(handler)) return () => { }\n    const log = meta?.logger ?? stateLog\n    log.trace(`new onChange handler: ${tersify(handler)}`)\n    handlers.push(handler)\n    return () => { handlers.splice(handlers.indexOf(handler), 1) }\n  }\n\n  function reset() { set(init) }\n\n  return [\n    value,\n    set,\n    onChange,\n    reset\n  ]\n}\n"]}