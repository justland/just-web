{"version":3,"file":"registry.js","sourceRoot":"","sources":["../ts/registry.ts"],"names":[],"mappings":";;;AAAA,yCAAyD;AAEzD,mCAAqC;AAgBrC,SAAgB,cAAc,CAEzB,IAAmB;IACtB,MAAM,KAAK,GAAG,IAAA,mBAAW,EAAsB,IAAA,kBAAM,EAAC,IAAI,CAAC,CAAC,CAAA;IAE5D,OAAO;QACL,GAAG,KAAK;QACR,IAAI;YACF,MAAM,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAA;YACrB,OAAO,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAe,CAAA;QAC9E,CAAC;QACD,IAAI;YACF,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC,MAAM,CAAA;QAC3B,CAAC;QACD,IAAI;YACF,MAAM,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAA;YACrB,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACnC,CAAC;KACF,CAAA;AACH,CAAC;AAnBD,wCAmBC;AAED,SAAgB,kBAAkB,CAA+B,QAAW;IAE1E,OAAO,IAAA,gBAAI,EAAC,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAQ,CAAA;AACzE,CAAC;AAHD,gDAGC","sourcesContent":["import { KeyTypes, pick, record, Widen } from 'type-plus'\nimport { OnStateChange, ResetState, SetState } from './state'\nimport { createStore } from './store'\n\nexport interface ReadonlyRegistry<K extends KeyTypes, T> {\n  get(): Record<K, T>,\n  onChange: OnStateChange<Record<K, T>>,\n  keys(): K[],\n  size(): number,\n  list(): T[]\n}\n\nexport interface Registry<K extends KeyTypes, T> extends ReadonlyRegistry<K, T> {\n  set: SetState<Record<K, T>>,\n  update: (handler: (draft: Record<K, T>) => Record<K, T> | void) => void,\n  reset: ResetState\n}\n\nexport function createRegistry<\n  K extends KeyTypes,\n  T>(init?: Record<K, T>): Registry<Widen<K>, T> {\n  const store = createStore<Record<Widen<K>, T>>(record(init))\n\n  return {\n    ...store,\n    keys() {\n      const r = store.get()\n      return [...Object.keys(r), ...Object.getOwnPropertySymbols(r)] as Widen<K>[]\n    },\n    size() {\n      return this.keys().length\n    },\n    list(): T[] {\n      const r = store.get()\n      return this.keys().map(k => r[k])\n    }\n  }\n}\n\nexport function toReadonlyRegistry<S extends Registry<any, any>>(registry: S): S extends Registry<infer K, infer T> ? ReadonlyRegistry<K, T> : never {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  return pick(registry, 'get', 'onChange', 'keys', 'size', 'list') as any\n}\n"]}